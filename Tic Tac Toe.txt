from collections import deque
class TicTacToe:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def display_board(self):
        for row in self.board:
            print("|".join(row))
            print("-----")

    def is_winner(self, player):
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)) or all(self.board[j][i] == player for j in range(3)):
                return True

        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2 - i] == player for i in range(3)):
            return True

        return False

    def is_full(self):
        return all(self.board[i][j] != ' ' for i in range(3) for j in range(3))

    def get_empty_cells(self):
        return [(i, j) for i in range(3) for j in range(3) if self.board[i][j] == ' ']

    def make_move(self, player, row, col):
        if self.board[row][col] == ' ':
            self.board[row][col] = player
            return True
        return False
def tic_tac_toe_bfs(board):
    queue = deque([(board, [])])
    visited = set()

    while queue:
        current_board, moves = queue.popleft()

        if current_board.is_winner('X'):
            return moves

        if current_board.is_winner('O'):
            continue 

        if current_board.is_full():
            continue  

        if current_board in visited:
            continue

        visited.add(current_board)

        for i, j in current_board.get_empty_cells():
            new_board = TicTacToe()
            new_board.board = [row.copy() for row in current_board.board]
            new_board.make_move('X', i, j)
            queue.append((new_board, moves + [(i, j)]))

    return None
def print_instructions():
    print("Tic-Tac-Toe Game")
    print("Enter your move in the format 'row,col'. For example, '0,0' for the top-left corner.")
    print("You are 'O', and the computer is 'X'. Let's begin!\n")

def main():
    print("Tic-Tac-Toe Game")
    print("Enter your move in the format 'row,col'. For example, '0,0' for the top-left corner.")
    print("You are 'O', and the computer is 'X'. Let's begin!\n")

    game = TicTacToe()
    while True:
        game.display_board()
        player_move = input("Your move: ")
        row, col = map(int, player_move.split(","))
        if game.make_move('O', row, col):
            if game.is_winner('O'):
                game.display_board()
                print("Congratulations! You win!")
                break
            elif game.is_full():
                game.display_board()
                print("It's a draw!")
                break

            computer_moves = tic_tac_toe_bfs(game)
            if computer_moves:
                for move in computer_moves:
                    row, col = move
                    if game.make_move('X', row, col):
                        break
                else:
                    print("Invalid move by the computer. Ending the game.")
                    break

                if game.is_winner('X'):
                    game.display_board()
                    print("Sorry, you lose. Better luck next time!")
                    break
                elif game.is_full():
                    game.display_board()
                    print("It's a draw!")
                    break
            else:
                print("No solution found. It's a draw!")
                break

    print("Game over.")

main()